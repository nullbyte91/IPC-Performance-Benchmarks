// This file is generated by omniidl (C++ backend) - omniORB_4_3. Do not edit.

#include "ImageTransfer.hh"
#include <omniORB4/IOP_S.h>
#include <omniORB4/IOP_C.h>
#include <omniORB4/callDescriptor.h>
#include <omniORB4/callHandle.h>
#include <omniORB4/objTracker.h>


OMNI_USING_NAMESPACE(omni)

static const char* _0RL_library_version = omniORB_4_3;



ImageTransfer::ImageService_ptr ImageTransfer::ImageService_Helper::_nil() {
  return ::ImageTransfer::ImageService::_nil();
}

::CORBA::Boolean ImageTransfer::ImageService_Helper::is_nil(::ImageTransfer::ImageService_ptr p) {
  return ::CORBA::is_nil(p);

}

void ImageTransfer::ImageService_Helper::release(::ImageTransfer::ImageService_ptr p) {
  ::CORBA::release(p);
}

void ImageTransfer::ImageService_Helper::marshalObjRef(::ImageTransfer::ImageService_ptr obj, cdrStream& s) {
  ::ImageTransfer::ImageService::_marshalObjRef(obj, s);
}

ImageTransfer::ImageService_ptr ImageTransfer::ImageService_Helper::unmarshalObjRef(cdrStream& s) {
  return ::ImageTransfer::ImageService::_unmarshalObjRef(s);
}

void ImageTransfer::ImageService_Helper::duplicate(::ImageTransfer::ImageService_ptr obj) {
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
}

ImageTransfer::ImageService_ptr
ImageTransfer::ImageService::_duplicate(::ImageTransfer::ImageService_ptr obj)
{
  if (obj && !obj->_NP_is_nil())  omni::duplicateObjRef(obj);
  return obj;
}

ImageTransfer::ImageService_ptr
ImageTransfer::ImageService::_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_realNarrow(_PD_repoId);
  return e ? e : _nil();
}


ImageTransfer::ImageService_ptr
ImageTransfer::ImageService::_unchecked_narrow(::CORBA::Object_ptr obj)
{
  if (!obj || obj->_NP_is_nil() || obj->_NP_is_pseudo()) return _nil();
  _ptr_type e = (_ptr_type) obj->_PR_getobj()->_uncheckedNarrow(_PD_repoId);
  return e ? e : _nil();
}

ImageTransfer::ImageService_ptr
ImageTransfer::ImageService::_nil()
{
#ifdef OMNI_UNLOADABLE_STUBS
  static _objref_ImageService _the_nil_obj;
  return &_the_nil_obj;
#else
  static _objref_ImageService* _the_nil_ptr = 0;
  if (!_the_nil_ptr) {
    omni::nilRefLock().lock();
    if (!_the_nil_ptr) {
      _the_nil_ptr = new _objref_ImageService;
      registerNilCorbaObject(_the_nil_ptr);
    }
    omni::nilRefLock().unlock();
  }
  return _the_nil_ptr;
#endif
}

const char* ImageTransfer::ImageService::_PD_repoId = "IDL:ImageTransfer/ImageService:1.0";


ImageTransfer::_objref_ImageService::~_objref_ImageService() {
  
}


ImageTransfer::_objref_ImageService::_objref_ImageService(omniIOR* ior, omniIdentity* id) :
   omniObjRef(::ImageTransfer::ImageService::_PD_repoId, ior, id, 1)
   
   
{
  _PR_setobj(this);
}

void*
ImageTransfer::_objref_ImageService::_ptrToObjRef(const char* id)
{
  if (id == ::ImageTransfer::ImageService::_PD_repoId)
    return (::ImageTransfer::ImageService_ptr) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (::CORBA::Object_ptr) this;

  if (omni::strMatch(id, ::ImageTransfer::ImageService::_PD_repoId))
    return (::ImageTransfer::ImageService_ptr) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (::CORBA::Object_ptr) this;

  return 0;
}


//
// Code for ImageTransfer::ImageService::send_image

// Proxy call descriptor class. Mangled signature:
//  _cboolean_i_cstring_i_clong_i_clong_i_clong
class _0RL_cd_bcd5cfcbe34172ae_00000000
  : public omniCallDescriptor
{
public:
  inline _0RL_cd_bcd5cfcbe34172ae_00000000(LocalCallFn lcfn, const char* op_, size_t oplen, _CORBA_Boolean upcall=0)
    : omniCallDescriptor(lcfn, op_, oplen, 0, _user_exns, 0, upcall)
  {
    
  }
  
  void marshalArguments(cdrStream&);
  void unmarshalArguments(cdrStream&);

  void unmarshalReturnedValues(cdrStream&);
  void marshalReturnedValues(cdrStream&);
  
  
  static const char* const _user_exns[];

  ::CORBA::String_var arg_0_;
  const char* arg_0;
  ::CORBA::Long arg_1;
  ::CORBA::Long arg_2;
  ::CORBA::Long arg_3;
  ::CORBA::Boolean result;
};

void _0RL_cd_bcd5cfcbe34172ae_00000000::marshalArguments(cdrStream& _n)
{
  _n.marshalString(arg_0,0);
  arg_1 >>= _n;
  arg_2 >>= _n;
  arg_3 >>= _n;

}

void _0RL_cd_bcd5cfcbe34172ae_00000000::unmarshalArguments(cdrStream& _n)
{
  arg_0_ = _n.unmarshalString(0);
  arg_0 = arg_0_.in();
  (::CORBA::Long&)arg_1 <<= _n;
  (::CORBA::Long&)arg_2 <<= _n;
  (::CORBA::Long&)arg_3 <<= _n;

}

void _0RL_cd_bcd5cfcbe34172ae_00000000::marshalReturnedValues(cdrStream& _n)
{
  _n.marshalBoolean(result);

}

void _0RL_cd_bcd5cfcbe34172ae_00000000::unmarshalReturnedValues(cdrStream& _n)
{
  result = _n.unmarshalBoolean();

}

const char* const _0RL_cd_bcd5cfcbe34172ae_00000000::_user_exns[] = {
  0
};

// Local call call-back function.
static void
_0RL_lcfn_bcd5cfcbe34172ae_10000000(omniCallDescriptor* cd, omniServant* svnt)
{
  _0RL_cd_bcd5cfcbe34172ae_00000000* tcd = (_0RL_cd_bcd5cfcbe34172ae_00000000*)cd;
  ImageTransfer::_impl_ImageService* impl = (ImageTransfer::_impl_ImageService*) svnt->_ptrToInterface(ImageTransfer::ImageService::_PD_repoId);
  tcd->result = impl->send_image(tcd->arg_0, tcd->arg_1, tcd->arg_2, tcd->arg_3);


}

::CORBA::Boolean ImageTransfer::_objref_ImageService::send_image(const char* image_data, ::CORBA::Long width, ::CORBA::Long height, ::CORBA::Long type)
{
  _0RL_cd_bcd5cfcbe34172ae_00000000 _call_desc(_0RL_lcfn_bcd5cfcbe34172ae_10000000, "send_image", 11);
  _call_desc.arg_0 = image_data;
  _call_desc.arg_1 = width;
  _call_desc.arg_2 = height;
  _call_desc.arg_3 = type;

  _invoke(_call_desc);
  return _call_desc.result;


}

ImageTransfer::_pof_ImageService::~_pof_ImageService() {}


omniObjRef*
ImageTransfer::_pof_ImageService::newObjRef(omniIOR* ior, omniIdentity* id)
{
  return new ::ImageTransfer::_objref_ImageService(ior, id);
}


::CORBA::Boolean
ImageTransfer::_pof_ImageService::is_a(const char* id) const
{
  if (omni::ptrStrMatch(id, ::ImageTransfer::ImageService::_PD_repoId))
    return 1;
  
  return 0;
}

const ImageTransfer::_pof_ImageService _the_pof_ImageTransfer_mImageService;

ImageTransfer::_impl_ImageService::~_impl_ImageService() {}


::CORBA::Boolean
ImageTransfer::_impl_ImageService::_dispatch(omniCallHandle& _handle)
{
  const char* op = _handle.operation_name();

  if (omni::strMatch(op, "send_image")) {

    _0RL_cd_bcd5cfcbe34172ae_00000000 _call_desc(_0RL_lcfn_bcd5cfcbe34172ae_10000000, "send_image", 11, 1);
    
    _handle.upcall(this,_call_desc);
    return 1;
  }


  return 0;
}

void*
ImageTransfer::_impl_ImageService::_ptrToInterface(const char* id)
{
  if (id == ::ImageTransfer::ImageService::_PD_repoId)
    return (::ImageTransfer::_impl_ImageService*) this;
  
  if (id == ::CORBA::Object::_PD_repoId)
    return (void*) 1;

  if (omni::strMatch(id, ::ImageTransfer::ImageService::_PD_repoId))
    return (::ImageTransfer::_impl_ImageService*) this;
  
  if (omni::strMatch(id, ::CORBA::Object::_PD_repoId))
    return (void*) 1;
  return 0;
}

const char*
ImageTransfer::_impl_ImageService::_mostDerivedRepoId()
{
  return ::ImageTransfer::ImageService::_PD_repoId;
}

POA_ImageTransfer::ImageService::~ImageService() {}

