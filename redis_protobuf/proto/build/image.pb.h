// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: image.proto

#ifndef PROTOBUF_INCLUDED_image_2eproto
#define PROTOBUF_INCLUDED_image_2eproto

#include <string>

#include <google/protobuf/stubs/common.h>

#if GOOGLE_PROTOBUF_VERSION < 3006001
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please update
#error your headers.
#endif
#if 3006001 < GOOGLE_PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers.  Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#define PROTOBUF_INTERNAL_EXPORT_protobuf_image_2eproto 

namespace protobuf_image_2eproto {
// Internal implementation detail -- do not use these members.
struct TableStruct {
  static const ::google::protobuf::internal::ParseTableField entries[];
  static const ::google::protobuf::internal::AuxillaryParseTableField aux[];
  static const ::google::protobuf::internal::ParseTable schema[1];
  static const ::google::protobuf::internal::FieldMetadata field_metadata[];
  static const ::google::protobuf::internal::SerializationTable serialization_table[];
  static const ::google::protobuf::uint32 offsets[];
};
void AddDescriptors();
}  // namespace protobuf_image_2eproto
namespace trodes {
namespace proto {
class Image;
class ImageDefaultTypeInternal;
extern ImageDefaultTypeInternal _Image_default_instance_;
}  // namespace proto
}  // namespace trodes
namespace google {
namespace protobuf {
template<> ::trodes::proto::Image* Arena::CreateMaybeMessage<::trodes::proto::Image>(Arena*);
}  // namespace protobuf
}  // namespace google
namespace trodes {
namespace proto {

// ===================================================================

class Image : public ::google::protobuf::Message /* @@protoc_insertion_point(class_definition:trodes.proto.Image) */ {
 public:
  Image();
  virtual ~Image();

  Image(const Image& from);

  inline Image& operator=(const Image& from) {
    CopyFrom(from);
    return *this;
  }
  #if LANG_CXX11
  Image(Image&& from) noexcept
    : Image() {
    *this = ::std::move(from);
  }

  inline Image& operator=(Image&& from) noexcept {
    if (GetArenaNoVirtual() == from.GetArenaNoVirtual()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }
  #endif
  static const ::google::protobuf::Descriptor* descriptor();
  static const Image& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Image* internal_default_instance() {
    return reinterpret_cast<const Image*>(
               &_Image_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  void Swap(Image* other);
  friend void swap(Image& a, Image& b) {
    a.Swap(&b);
  }

  // implements Message ----------------------------------------------

  inline Image* New() const final {
    return CreateMaybeMessage<Image>(NULL);
  }

  Image* New(::google::protobuf::Arena* arena) const final {
    return CreateMaybeMessage<Image>(arena);
  }
  void CopyFrom(const ::google::protobuf::Message& from) final;
  void MergeFrom(const ::google::protobuf::Message& from) final;
  void CopyFrom(const Image& from);
  void MergeFrom(const Image& from);
  void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  bool MergePartialFromCodedStream(
      ::google::protobuf::io::CodedInputStream* input) final;
  void SerializeWithCachedSizes(
      ::google::protobuf::io::CodedOutputStream* output) const final;
  ::google::protobuf::uint8* InternalSerializeWithCachedSizesToArray(
      bool deterministic, ::google::protobuf::uint8* target) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Image* other);
  private:
  inline ::google::protobuf::Arena* GetArenaNoVirtual() const {
    return NULL;
  }
  inline void* MaybeArenaPtr() const {
    return NULL;
  }
  public:

  ::google::protobuf::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  // bytes mat_data = 5;
  void clear_mat_data();
  static const int kMatDataFieldNumber = 5;
  const ::std::string& mat_data() const;
  void set_mat_data(const ::std::string& value);
  #if LANG_CXX11
  void set_mat_data(::std::string&& value);
  #endif
  void set_mat_data(const char* value);
  void set_mat_data(const void* value, size_t size);
  ::std::string* mutable_mat_data();
  ::std::string* release_mat_data();
  void set_allocated_mat_data(::std::string* mat_data);

  // int32 rows = 1;
  void clear_rows();
  static const int kRowsFieldNumber = 1;
  ::google::protobuf::int32 rows() const;
  void set_rows(::google::protobuf::int32 value);

  // int32 cols = 2;
  void clear_cols();
  static const int kColsFieldNumber = 2;
  ::google::protobuf::int32 cols() const;
  void set_cols(::google::protobuf::int32 value);

  // int32 elt_type = 3;
  void clear_elt_type();
  static const int kEltTypeFieldNumber = 3;
  ::google::protobuf::int32 elt_type() const;
  void set_elt_type(::google::protobuf::int32 value);

  // int32 elt_size = 4;
  void clear_elt_size();
  static const int kEltSizeFieldNumber = 4;
  ::google::protobuf::int32 elt_size() const;
  void set_elt_size(::google::protobuf::int32 value);

  // @@protoc_insertion_point(class_scope:trodes.proto.Image)
 private:

  ::google::protobuf::internal::InternalMetadataWithArena _internal_metadata_;
  ::google::protobuf::internal::ArenaStringPtr mat_data_;
  ::google::protobuf::int32 rows_;
  ::google::protobuf::int32 cols_;
  ::google::protobuf::int32 elt_type_;
  ::google::protobuf::int32 elt_size_;
  mutable ::google::protobuf::internal::CachedSize _cached_size_;
  friend struct ::protobuf_image_2eproto::TableStruct;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Image

// int32 rows = 1;
inline void Image::clear_rows() {
  rows_ = 0;
}
inline ::google::protobuf::int32 Image::rows() const {
  // @@protoc_insertion_point(field_get:trodes.proto.Image.rows)
  return rows_;
}
inline void Image::set_rows(::google::protobuf::int32 value) {
  
  rows_ = value;
  // @@protoc_insertion_point(field_set:trodes.proto.Image.rows)
}

// int32 cols = 2;
inline void Image::clear_cols() {
  cols_ = 0;
}
inline ::google::protobuf::int32 Image::cols() const {
  // @@protoc_insertion_point(field_get:trodes.proto.Image.cols)
  return cols_;
}
inline void Image::set_cols(::google::protobuf::int32 value) {
  
  cols_ = value;
  // @@protoc_insertion_point(field_set:trodes.proto.Image.cols)
}

// int32 elt_type = 3;
inline void Image::clear_elt_type() {
  elt_type_ = 0;
}
inline ::google::protobuf::int32 Image::elt_type() const {
  // @@protoc_insertion_point(field_get:trodes.proto.Image.elt_type)
  return elt_type_;
}
inline void Image::set_elt_type(::google::protobuf::int32 value) {
  
  elt_type_ = value;
  // @@protoc_insertion_point(field_set:trodes.proto.Image.elt_type)
}

// int32 elt_size = 4;
inline void Image::clear_elt_size() {
  elt_size_ = 0;
}
inline ::google::protobuf::int32 Image::elt_size() const {
  // @@protoc_insertion_point(field_get:trodes.proto.Image.elt_size)
  return elt_size_;
}
inline void Image::set_elt_size(::google::protobuf::int32 value) {
  
  elt_size_ = value;
  // @@protoc_insertion_point(field_set:trodes.proto.Image.elt_size)
}

// bytes mat_data = 5;
inline void Image::clear_mat_data() {
  mat_data_.ClearToEmptyNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline const ::std::string& Image::mat_data() const {
  // @@protoc_insertion_point(field_get:trodes.proto.Image.mat_data)
  return mat_data_.GetNoArena();
}
inline void Image::set_mat_data(const ::std::string& value) {
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), value);
  // @@protoc_insertion_point(field_set:trodes.proto.Image.mat_data)
}
#if LANG_CXX11
inline void Image::set_mat_data(::std::string&& value) {
  
  mat_data_.SetNoArena(
    &::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::move(value));
  // @@protoc_insertion_point(field_set_rvalue:trodes.proto.Image.mat_data)
}
#endif
inline void Image::set_mat_data(const char* value) {
  GOOGLE_DCHECK(value != NULL);
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), ::std::string(value));
  // @@protoc_insertion_point(field_set_char:trodes.proto.Image.mat_data)
}
inline void Image::set_mat_data(const void* value, size_t size) {
  
  mat_data_.SetNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(),
      ::std::string(reinterpret_cast<const char*>(value), size));
  // @@protoc_insertion_point(field_set_pointer:trodes.proto.Image.mat_data)
}
inline ::std::string* Image::mutable_mat_data() {
  
  // @@protoc_insertion_point(field_mutable:trodes.proto.Image.mat_data)
  return mat_data_.MutableNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline ::std::string* Image::release_mat_data() {
  // @@protoc_insertion_point(field_release:trodes.proto.Image.mat_data)
  
  return mat_data_.ReleaseNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited());
}
inline void Image::set_allocated_mat_data(::std::string* mat_data) {
  if (mat_data != NULL) {
    
  } else {
    
  }
  mat_data_.SetAllocatedNoArena(&::google::protobuf::internal::GetEmptyStringAlreadyInited(), mat_data);
  // @@protoc_insertion_point(field_set_allocated:trodes.proto.Image.mat_data)
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__

// @@protoc_insertion_point(namespace_scope)

}  // namespace proto
}  // namespace trodes

// @@protoc_insertion_point(global_scope)

#endif  // PROTOBUF_INCLUDED_image_2eproto
